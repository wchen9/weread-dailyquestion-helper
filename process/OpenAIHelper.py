import os
import openai


class OpenAIHelper:
    def __init__(self, openaiKey):
        self.openaiKey = openaiKey

    def answer(self, ques, option):
        openai.api_key = self.openaiKey

        prompt_prefix = """你是一个中文答题机器人，你的能力是根据问题从几个选项中选出正确可能性最高的答案。
        提供的问题跟答案中都可能存在错别字，因此为了获得最准确的答案，你将把解答过程分为两步：第一步，先修正问题或答案中的错别字；第二步，根据修改过错别字的问题和答案重新解答问题。修正错别字时，你需要根据问题和答案选择正确可能性最大的文本。

        错别字的修正过程中，只有文本`一`可能是下划线`_`的错别字。

        如果问题是三个字，那么问题可能是需要将三个字补充成成语。
        举例1. 问题`余之人`，选项`['鼬', '刑']`，则可能的补充结果是`['鼬余之人','余鼬之人','余之鼬人','余之人鼬','刑余之人','余刑之人','余之刑人','余之人刑']`，从补充的选项中，最可能的结果是`刑余之人`。因此，答案是`刑`。

        如果问题是四个字，则其中的文本`一`可能是下划线`_`的错别字。
        举例2，问题是`杯一之敬`，选项是`['茗', '岚']`，修正后的问题是`杯_之敬`，因为文本`一`最可能是下划线的错别字，答案是 `杯茗之敬`。

        举例3，提供一个问题为`《牛忙》的作者是？`，其答案从如下选项中选择:`['伏尼契', '莫泊亲']`,修正错别字时，你需要根据问题和答案选择正确可能性最大的文本。比如:伏尼契写了牛虻，因此问题中的牛忙很可能是牛虻的错别字;莫泊亲中的亲字很不符合规律，其可能是莫泊桑的错别字。因此，你将问题修正为:`《牛虻》的作者是？`，你将答案的选项修正为`['伏尼契', '莫泊桑']`，然后你根据修正过的问题和答案答题，伏尼契写过牛虻，因此这题的正确答案是伏尼契。

        举例4，问题是`一之一毛`，其选项是`['羊', '猪', '牛']`，问题中其中一个`一`是下划线`_`的错别字，修正后的问题是`_之一毛`,这个问题需要从选项中选择一个字填充到下划线的地方。此时你将填充选项到下划线存在的地方，如这题填充后的结果是`羊之一毛`、`猪之一毛`、`牛之一毛`。从这三个填充后的选项中，你认为`牛之一毛`是正确可能性最大的结果。填充后的结果是`牛之一毛`。

        举例5，问题是`中国自己拍摄的第一部无声电影是？`，选项是`['《歌女红牡丹》', '《淀军山》']`。因为问题中问到的是电影，那么答案中的`淀军山`很可能是错别字，因为`淀军山`不是电影，其修正后的文本是`定军山`。答案选项`歌女红牡丹`是有声电影，因此这个选项不可能是正确答案，所以答案是`定军山`。

        举例6，问题是`远芳侵一，晴翠接荒城。`,选项是`['驿道', '古道']`。那么需要将问题修正为`远芳侵_，晴翠接荒城。`，将选项填充到下划线的地方，填充后的结果是`远芳侵驿道，晴翠接荒城。`、`远芳侵古道，晴翠接荒城。`。从这两个填充后的选项中，你认为`远芳侵古道，晴翠接荒城。`是正确可能性最大的结果。因此，答案是`古道`。

        你将以如下格式打印结果：
        1. 修正后的问题与选项：
        `问题：问题的文本`,
        `选项：选项的文本`,
        2. `答案：答案的文本`。

        下面用```符号包住的部分是问题和答案，请按步骤给出结果。"""

        os.environ["http_proxy"] = "http://127.0.0.1:7890"
        os.environ["https_proxy"] = "http://127.0.0.1:7890"
        prompt = f"{prompt_prefix}```问题:{ques};选项:{option}.```"
        conversation = [{"role": "user", "content": prompt}]
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=conversation,
            temperature=1,
            max_tokens=2048,
            top_p=0.9,
        )
        conversation.append(
            {
                "role": "assistant",
                "content": response["choices"][0]["message"]["content"],
            }
        )
        return response["choices"][0]["message"]["content"]
